#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class HyySearchRequest(object):
    """
    Attributes:
     - qid
     - data
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'qid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'data', 'UTF8', None, ),  # 2
    )

    def __init__(self, qid=None, data=None,):
        self.qid = qid
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.qid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HyySearchRequest')
        if self.qid is not None:
            oprot.writeFieldBegin('qid', TType.STRING, 1)
            oprot.writeString(self.qid.encode('utf-8') if sys.version_info[0] == 2 else self.qid)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HyyDoc(object):
    """
    Attributes:
     - doc_id
     - title
     - author
     - datetime
     - source
     - text
     - short_text
     - source_icon
     - source_desc
     - detail_url
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'doc_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'author', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'datetime', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'source', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'text', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'short_text', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'source_icon', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'source_desc', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'detail_url', 'UTF8', None, ),  # 10
    )

    def __init__(self, doc_id=None, title=None, author=None, datetime=None, source=None, text=None, short_text=None, source_icon=None, source_desc=None, detail_url=None,):
        self.doc_id = doc_id
        self.title = title
        self.author = author
        self.datetime = datetime
        self.source = source
        self.text = text
        self.short_text = short_text
        self.source_icon = source_icon
        self.source_desc = source_desc
        self.detail_url = detail_url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.doc_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.author = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.datetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.source = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.short_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.source_icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.source_desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.detail_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HyyDoc')
        if self.doc_id is not None:
            oprot.writeFieldBegin('doc_id', TType.STRING, 1)
            oprot.writeString(self.doc_id.encode('utf-8') if sys.version_info[0] == 2 else self.doc_id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRING, 3)
            oprot.writeString(self.author.encode('utf-8') if sys.version_info[0] == 2 else self.author)
            oprot.writeFieldEnd()
        if self.datetime is not None:
            oprot.writeFieldBegin('datetime', TType.STRING, 4)
            oprot.writeString(self.datetime.encode('utf-8') if sys.version_info[0] == 2 else self.datetime)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 5)
            oprot.writeString(self.source.encode('utf-8') if sys.version_info[0] == 2 else self.source)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 6)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.short_text is not None:
            oprot.writeFieldBegin('short_text', TType.STRING, 7)
            oprot.writeString(self.short_text.encode('utf-8') if sys.version_info[0] == 2 else self.short_text)
            oprot.writeFieldEnd()
        if self.source_icon is not None:
            oprot.writeFieldBegin('source_icon', TType.STRING, 8)
            oprot.writeString(self.source_icon.encode('utf-8') if sys.version_info[0] == 2 else self.source_icon)
            oprot.writeFieldEnd()
        if self.source_desc is not None:
            oprot.writeFieldBegin('source_desc', TType.STRING, 9)
            oprot.writeString(self.source_desc.encode('utf-8') if sys.version_info[0] == 2 else self.source_desc)
            oprot.writeFieldEnd()
        if self.detail_url is not None:
            oprot.writeFieldBegin('detail_url', TType.STRING, 10)
            oprot.writeString(self.detail_url.encode('utf-8') if sys.version_info[0] == 2 else self.detail_url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HyySearchResponse(object):
    """
    Attributes:
     - qid
     - doc_list
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'qid', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'doc_list', (TType.STRUCT, (HyyDoc, HyyDoc.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, qid=None, doc_list=None,):
        self.qid = qid
        self.doc_list = doc_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.qid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.doc_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = HyyDoc()
                        _elem5.read(iprot)
                        self.doc_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HyySearchResponse')
        if self.qid is not None:
            oprot.writeFieldBegin('qid', TType.STRING, 1)
            oprot.writeString(self.qid.encode('utf-8') if sys.version_info[0] == 2 else self.qid)
            oprot.writeFieldEnd()
        if self.doc_list is not None:
            oprot.writeFieldBegin('doc_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.doc_list))
            for iter6 in self.doc_list:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
